var fs = require('fs')

function get_rollsArray(settings) {
  const length = settings.length || 5
  const min = settings.min || 1
  const max = settings.max || 6
  let rollsArray = settings.array || []
  const toRoll = max - min + 1
  for (let i = rollsArray.length || 0; i < length; i++) {
    const newRoll = Math.floor(Math.random() * toRoll + min)
    rollsArray.push(newRoll)
  }
  return rollsArray
}

function get_X_of_a_kind(arr) {
  const result = {};
  const rollsArrayCopy = arr.slice() || [0, 0, 0, 0, 0]
  let temp2dArray = [];

  /*  basically, create a new array to count all the individual elements,
    e.g. 1x1, 0x2, 0x3, 2x4, 2x5, 0x6 */
  for (let index = 0; index < rollsArrayCopy.length; index++) {
    const val = rollsArrayCopy[index]
    temp2dArray[val] = (temp2dArray[val]) ? temp2dArray[val] : []
    temp2dArray[val].push(val)
  }
  temp2dArray = temp2dArray.filter(n => n !== undefined); // clean the eventual "unidefined"
  temp2dArray.sort((a, b) => { // sort by length(descending), then by value(descending)
    if (a.length !== b.length) return (b.length - a.length)
    if (a[0] !== b[0]) return (b[0] - a[0])
    return 0
  })
  // filter doublets, then deep-clone it via stringify->parse (deep-clone to prevent some weird shit)
  let dupsToReplace = JSON.parse(JSON.stringify(temp2dArray.filter(n => n.length >= 2)));
  for (let i = 0; i < dupsToReplace.length; i++) {
    dupsToReplace[i].pop(); // reduce doublets by one to mark them as "toReplace"
  }
  result.pattern = temp2dArray.filter(n => n.length >= 2) //array with duplicate-blocks

  result.merged = [].concat.apply([], temp2dArray); //  merge that above to get  e.g. : 4 4 5 5 1
  result.merged = result.merged.filter(n => n !== undefined); // clean the eventual "undefined"
  // result.sequence = getSequence(result.merged); // with maxLength and maxArray

  dupsToReplace = dupsToReplace.reduce((acc, val) => acc.concat(val), []); // flatten the array by one level, e.g.: [[a,b,c],[d,e]] to a simple [a,b,c,d,e]
  //   result.sequence.duplicates = dupsToReplace;
  //   return result;
  if (temp2dArray[0].length > 8) {}
  return temp2dArray || []
}

class RollsSettings {
  constructor(lengthIn, minIn, maxIn, arrayIn) {
    this.length = lengthIn > 0 ? lengthIn : 5;
    this.min = minIn > 0 ? lengthIn : 1;
    this.max = maxIn > 0 ? lengthIn : 6;
    this.array = JSON.parse(JSON.stringify(arrayIn || [])) || [];
    //deep-clone that shit, otherwise we get a bug-infestation!
  }
}
// const rolls1_settings = new RollsSettings()
const rolls1_settings = {}


class SampleSettings {
  constructor(turns, rollsPerTurn, c, d) {
    this.turns = turns || 100
    this.rollsPerTurn = rollsPerTurn || 3
  }
}

const sample1_settings = new SampleSettings(10000, 3)

function get_samples(settings) {
  const log = []
  const turns = settings.turns || 100;
  const rollsPerTurn = settings.rollsPerTurn || 3
  for (let turn = 1; turn <= turns; turn++) {
    let rolledDices = []
    let fixedDices = Array(turn % rollsPerTurn).fill(1)
    for (let roll = 1; roll <= rollsPerTurn; roll++) {
      log[turn] = log[turn] ? log[turn] : []
      if (roll == 1) log[turn].push(fixedDices)
      asdf
      rolls1_settings.array = JSON.parse(JSON.stringify(fixedDices))
      rolledDices = get_rollsArray(rolls1_settings)
      fixedDices = get_X_of_a_kind(rolledDices)[0] || []
      fixedDices = fixedDices.length >= 2 ? fixedDices : []
      log[turn].push(fixedDices)
    }
  }
  // for (let turn = 1; turn <= turns; turn++) {
  //   let rolledDices = []
  //   let fixedDices = []
  //   for (let roll = 1; roll <= rollsPerTurn; roll++) {
  //     rolls1_settings.array = JSON.parse(JSON.stringify(fixedDices))
  //     rolledDices = get_rollsArray(rolls1_settings)
  //     fixedDices = get_X_of_a_kind(rolledDices)[0] || []
  //     fixedDices = fixedDices.length >= 2 ? fixedDices : []
  //     log[turn] = log[turn] ? log[turn] : []
  //     log[turn].push(fixedDices)
  //   }
  // }
  log.shift()
  return log
}

function get_emptyMatrix(size_input) {
  const size = size_input + 1 || 2 + 1
  const matrix = [];
  for (let row = 0; row < size; row++) {
    matrix[row] = []
    for (let column = 0; column < size; column++) {
      matrix[row][column] = 0
    }
  }
  return matrix
}

function arraySum(array) {
  if (!array.length) {
    return 0;
  }
  let sum = 0;
  for (let i = array.length; i--;) {
    sum += array[i];
  }
  // const add = (a, b) => parseFloat(a) + parseFloat(b);
  // const sum = array.reduce(add);
  return sum;
}

function sample_to_transfMatrix(samples_input, settings_input) {
  if (!samples_input) {
    console.log('get me some samples!');
    return
  }
  const matrixSize = settings_input.length
  const turns = samples_input.length || get_samples(sample1_settings).length
  const turnLength = samples_input[0].length
  let resultsMatrix = get_emptyMatrix(matrixSize)

  /* getting the results-matrix, e.g.
    [ [ 0, 0, 0, 0, 0, 0 ],
    [ 0, 40, 681, 280, 39, 0 ],
    [ 0, 0, 465, 420, 90, 9 ],
    [ 0, 0, 0, 486, 224, 31 ],
    [ 0, 0, 0, 0, 168, 40 ],
    [ 0, 0, 0, 0, 0, 27 ] ] */
  // console.log('wtef?!$', samples_input)
  for (let loopI = 0; loopI < turns; loopI++) {
    const currentSample = JSON.parse(JSON.stringify(samples_input[loopI]))
    let lastFixed = 1
    let currentFixed = 1
    for (let loopJ = 0; loopJ < turnLength; loopJ++) {
      lastFixed = lastFixed || 1
      currentFixed = currentSample[loopJ].length || 1
      resultsMatrix[lastFixed][currentFixed]++
      lastFixed = currentFixed
    }
  }
  // console.log('results?!', resultsMatrix)
  /* getting the transformation-matrix, e.g.
    [ [ 0, 0, 0, 0, 0, 0 ],
    [ 0, 0.038, 0.672, 0.256, 0.032, 0.002 ],
    [ 0, 0, 0.479, 0.417, 0.096, 0.008 ],
    [ 0, 0, 0, 0.64, 0.32, 0.04 ],
    [ 0, 0, 0, 0, 0.8, 0.2 ],
    [ 0, 0, 0, 0, 0, 1 ] ] */
  const transfMatrix = JSON.parse(JSON.stringify(resultsMatrix))
  for (let loopA = 0; loopA < resultsMatrix.length; loopA++) {
    const rowSum = arraySum(resultsMatrix[loopA]) || 1
    for (let loopB = 0; loopB < resultsMatrix[0].length; loopB++) {
      transfMatrix[loopA][loopB] = Math.round(resultsMatrix[loopA][loopB] / rowSum * 1000) / 1000
    }
  }
  // console.log('resultsMatrix: ', resultsMatrix)
  console.log('transfMatrix: ', transfMatrix)
  return transfMatrix
}
const storage = {}
for (let alts = 2; alts <= 2; alts++) {
  storage[alts] = {}
  for (let rolls = 8; rolls <= 8; rolls++) {
    sample1_settings.turns = 100000
    sample1_settings.rollsPerTurn = rolls
    rolls1_settings.length = rolls
    rolls1_settings.max = alts
    rolls1_settings.array = []
    rolls1_settings.min = 1
    const samples = get_samples(sample1_settings)
    const result = sample_to_transfMatrix(samples, rolls1_settings)
    storage[alts][rolls] = result
  }
}
fs.writeFile('testfile123.txt', JSON.stringify(storage), function (err, file) {
  if (err) throw err;
  console.log('Saved!');
})



// const LULZ = '{"2":{"1":[[0,0],[0,85,null,null,null,null]],"2":[[0,0,0],[0,1,0],[0,0,0]],"3":[[0,0,0,0],[0,0,1,0],[0,0.069,0.932,0],[0,0,0,0]],"4":[[0,0,0,0,0],[0,0,0,1,0],[0,0,0,0,0],[0,0,0.027,0.973,0],[0,0,0,0,0]],"5":[[0,0,0,0,0,0],[0,0,0,0,1,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0.001,0.017,0.983,0],[0,0,0,0,0,0]],"6":[[0,0,0,0,0,0,0],[0,0,0,0,0,1,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0.001,0.01,0.989,0],[0,0,0,0,0,0,0]],"7":[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0.007,0.994,0],[0,0,0,0,0,0,0,0]],"8":[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0.003,0.997,0],[0,0,0,0,0,0,0,0,0]],"9":[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0.002,0.998,0],[0,0,0,0,0,0,0,0,0,0]],"10":[[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0]]},"3":{"1":[[0,0],[0,0,null,null,null,null,null,null,null,null,null]],"2":[[0,0,0],[0,1,0],[0,0,0]],"3":[[0,0,0,0],[0,0,1,0],[0,0.151,0.85,0],[0,0,0,0]],"4":[[0,0,0,0,0],[0,0,0,1,0],[0,0,0,0,0],[0,0,0.095,0.904,0],[0,0,0,0,0]],"5":[[0,0,0,0,0,0],[0,0,0,0,1,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0.007,0.065,0.928,0],[0,0,0,0,0,0]],"6":[[0,0,0,0,0,0,0],[0,0,0,0,0,1,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0.003,0.047,0.949,0],[0,0,0,0,0,0,0]],"7":[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0.004,0.035,0.961,0],[0,0,0,0,0,0,0,0]],"8":[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0.002,0.022,0.976,0],[0,0,0,0,0,0,0,0,0]],"9":[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0.001,0.017,0.982,0],[0,0,0,0,0,0,0,0,0,0]],"10":[[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0.001,0.011,0.988,0],[0,0,0,0,0,0,0,0,0,0,0]]},"4":{"1":[[0,0],[0,0,null,null,null,null,null,null,null,null]],"2":[[0,0,0],[0,1,0],[0,0,0]],"3":[[0,0,0,0],[0,0,1,0],[0,0.212,0.788,0],[0,0,0,0]],"4":[[0,0,0,0,0],[0,0,0,1,0],[0,0,0,0,0],[0,0.007,0.152,0.841,0],[0,0,0,0,0]],"5":[[0,0,0,0,0,0],[0,0,0,0,1,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0.025,0.1,0.876,0],[0,0,0,0,0,0]],"6":[[0,0,0,0,0,0,0],[0,0,0,0,0,1,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0.001,0.017,0.077,0.905,0],[0,0,0,0,0,0,0]],"7":[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0.002,0.015,0.061,0.923,0],[0,0,0,0,0,0,0,0]],"8":[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0.001,0.011,0.048,0.94,0],[0,0,0,0,0,0,0,0,0]],"9":[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0.001,0.007,0.037,0.955,0],[0,0,0,0,0,0,0,0,0,0]],"10":[[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0.001,0.005,0.032,0.962,0],[0,0,0,0,0,0,0,0,0,0,0]]},"5":{"1":[[0,0],[0,0,null,null,null,null,null,null]],"2":[[0,0,0],[0,1,0],[0,0,0]],"3":[[0,0,0,0],[0,0,1,0],[0,0.265,0.735,0],[0,0,0,0]],"4":[[0,0,0,0,0],[0,0,0,1,0],[0,0,0,0,0],[0,0.02,0.181,0.798,0],[0,0,0,0,0]],"5":[[0,0,0,0,0,0],[0,0,0,0,1,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0.037,0.119,0.844,0],[0,0,0,0,0,0]],"6":[[0,0,0,0,0,0,0],[0,0,0,0,0,1,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0.003,0.034,0.087,0.876,0],[0,0,0,0,0,0,0]],"7":[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0.006,0.029,0.07,0.895,0],[0,0,0,0,0,0,0,0]],"8":[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0.006,0.023,0.06,0.912,0],[0,0,0,0,0,0,0,0,0]],"9":[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0.003,0.021,0.051,0.926,0],[0,0,0,0,0,0,0,0,0,0]],"10":[[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0.003,0.015,0.045,0.937,0],[0,0,0,0,0,0,0,0,0,0,0]]},"6":{"1":[[0,0],[0,0,null,null,null,null,null,null]],"2":[[0,0,0],[0,1,0],[0,0,0]],"3":[[0,0,0,0],[0,0,1,0],[0,0.282,0.719,0],[0,0,0,0]],"4":[[0,0,0,0,0],[0,0,0,1,0],[0,0,0,0,0],[0,0.031,0.191,0.778,0],[0,0,0,0,0]],"5":[[0,0,0,0,0,0],[0,0,0,0,1,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0.001,0.059,0.125,0.815,0],[0,0,0,0,0,0]],"6":[[0,0,0,0,0,0,0],[0,0,0,0,0,1,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0.009,0.051,0.087,0.852,0],[0,0,0,0,0,0,0]],"7":[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0.001,0.012,0.041,0.076,0.87,0],[0,0,0,0,0,0,0,0]],"8":[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0.001,0.012,0.037,0.058,0.892,0],[0,0,0,0,0,0,0,0,0]],"9":[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0.002,0.01,0.029,0.052,0.909,0],[0,0,0,0,0,0,0,0,0,0]],"10":[[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0.007,0.025,0.045,0.923,0],[0,0,0,0,0,0,0,0,0,0,0]]},"7":{"1":[[0,0],[0,0,null,null,null,null,null,null]],"2":[[0,0,0],[0,1,0],[0,0,0]],"3":[[0,0,0,0],[0,0,1,0],[0,0.307,0.694,0],[0,0,0,0]],"4":[[0,0,0,0,0],[0,0,0,1,0],[0,0,0,0,0],[0,0.045,0.205,0.75,0],[0,0,0,0,0]],"5":[[0,0,0,0,0,0],[0,0,0,0,1,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0.002,0.08,0.116,0.803,0],[0,0,0,0,0,0]],"6":[[0,0,0,0,0,0,0],[0,0,0,0,0,1,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0.016,0.066,0.08,0.838,0],[0,0,0,0,0,0,0]],"7":[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0.001,0.019,0.053,0.064,0.863,0],[0,0,0,0,0,0,0,0]],"8":[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0.003,0.019,0.048,0.051,0.88,0],[0,0,0,0,0,0,0,0,0]],"9":[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0.001,0.003,0.015,0.039,0.046,0.896,0],[0,0,0,0,0,0,0,0,0,0]],"10":[[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0.003,0.014,0.034,0.038,0.91,0],[0,0,0,0,0,0,0,0,0,0,0]]},"8":{"1":[[0,0],[0,0,null,null,null,null,null,null]],"2":[[0,0,0],[0,1,0],[0,0,0]],"3":[[0,0,0,0],[0,0,1,0],[0,0.336,0.665,0],[0,0,0,0]],"4":[[0,0,0,0,0],[0,0,0,1,0],[0,0,0,0,0],[0,0.061,0.204,0.735,0],[0,0,0,0,0]],"5":[[0,0,0,0,0,0],[0,0,0,0,1,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0.002,0.095,0.113,0.791,0],[0,0,0,0,0,0]],"6":[[0,0,0,0,0,0,0],[0,0,0,0,0,1,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0.022,0.076,0.08,0.822,0],[0,0,0,0,0,0,0]],"7":[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0.004,0.031,0.061,0.054,0.85,0],[0,0,0,0,0,0,0,0]],"8":[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0.006,0.03,0.047,0.044,0.872,0],[0,0,0,0,0,0,0,0,0]],"9":[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0.001,0.008,0.021,0.043,0.04,0.887,0],[0,0,0,0,0,0,0,0,0,0]],"10":[[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0.001,0.007,0.021,0.035,0.033,0.903,0],[0,0,0,0,0,0,0,0,0,0,0]]},"9":{"1":[[0,0],[0,0,null,null,null,null,null,null]],"2":[[0,0,0],[0,1,0],[0,0,0]],"3":[[0,0,0,0],[0,0,1,0],[0,0.348,0.653,0],[0,0,0,0]],"4":[[0,0,0,0,0],[0,0,0,1,0],[0,0,0,0,0],[0,0.073,0.205,0.722,0],[0,0,0,0,0]],"5":[[0,0,0,0,0,0],[0,0,0,0,1,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0.004,0.11,0.106,0.78,0],[0,0,0,0,0,0]],"6":[[0,0,0,0,0,0,0],[0,0,0,0,0,1,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0.036,0.077,0.07,0.817,0],[0,0,0,0,0,0,0]],"7":[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0.007,0.035,0.065,0.046,0.848,0],[0,0,0,0,0,0,0,0]],"8":[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0.001,0.01,0.038,0.048,0.034,0.869,0],[0,0,0,0,0,0,0,0,0]],"9":[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0.001,0.011,0.03,0.04,0.031,0.886,0],[0,0,0,0,0,0,0,0,0,0]],"10":[[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0.003,0.012,0.026,0.034,0.028,0.897,0],[0,0,0,0,0,0,0,0,0,0,0]]},"10":{"1":[[0,0],[0,0,null,null,null,null,null,null]],"2":[[0,0,0],[0,1,0],[0,0,0]],"3":[[0,0,0,0],[0,0,1,0],[0,0.37,0.63,0],[0,0,0,0]],"4":[[0,0,0,0,0],[0,0,0,1,0],[0,0,0,0,0],[0,0.086,0.197,0.717,0],[0,0,0,0,0]],"5":[[0,0,0,0,0,0],[0,0,0,0,1,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0.007,0.116,0.102,0.775,0],[0,0,0,0,0,0]],"6":[[0,0,0,0,0,0,0],[0,0,0,0,0,1,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0.044,0.089,0.055,0.812,0],[0,0,0,0,0,0,0]],"7":[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0.009,0.047,0.061,0.043,0.841,0],[0,0,0,0,0,0,0,0]],"8":[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0.002,0.014,0.04,0.054,0.026,0.864,0],[0,0,0,0,0,0,0,0,0]],"9":[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0.004,0.016,0.035,0.041,0.023,0.88,0],[0,0,0,0,0,0,0,0,0,0]],"10":[[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0.004,0.016,0.032,0.032,0.021,0.895,0],[0,0,0,0,0,0,0,0,0,0,0]]}}'
// console.log('LULZ=!', JSON.parse(LULZ))
// console.log(JSON.parse(LULZ)[10][4])


// to test the "randomness" of floor+random. seems fine
// function get_random(settings_input) {
//   const length = 100000
//   const array = []
//   const min = 1
//   const max = 6
//   const span = max - min
//   for (let i = 0; i < length; i++) {
//     array.push(Math.floor(Math.random() * span + min))
//     // array.push(random.die(6))

//   }
//   const groupedArray = get_X_of_a_kind(array)
//   const resultsArray = []
//   for (let i = 0; i < groupedArray.length; i++) {
//     resultsArray[i] = groupedArray[i].length
//   }
//   console.log(resultsArray)
// }
// get_random()
